/*! normalize.scss v0.1.0 | MIT License | based on git.io/normalize */html{font-family:sans-serif;-ms-text-size-adjust:100%;-webkit-text-size-adjust:100%}body{margin:0}article,aside,details,figcaption,figure,footer,header,hgroup,main,menu,nav,section,summary{display:block}audio,canvas,progress,video{display:inline-block;vertical-align:baseline}audio:not([controls]){display:none;height:0}[hidden],template{display:none}a{background:0 0}a:active,a:hover{outline:0}abbr[title]{border-bottom:1px dotted}b,strong{font-weight:700}dfn{font-style:italic}h1{font-size:2em;margin:.67em 0}mark{background:#ff0;color:#000}small{font-size:80%}sub,sup{font-size:75%;line-height:0;position:relative;vertical-align:baseline}sup{top:-.5em}sub{bottom:-.25em}img{border:0}svg:not(:root){overflow:hidden}figure{margin:1em 40px}hr{box-sizing:content-box;height:0}pre{overflow:auto}code,kbd,pre,samp{font:1em monospace,monospace}button,input,optgroup,select,textarea{color:inherit;font:inherit;margin:0}button{overflow:visible}button,select{text-transform:none}button,html input[type=button],input[type=reset],input[type=submit]{-webkit-appearance:button;cursor:pointer}button[disabled],html input[disabled]{cursor:default}button::-moz-focus-inner,input::-moz-focus-inner{border:0;padding:0}input{line-height:normal}input[type=checkbox],input[type=radio]{box-sizing:border-box;padding:0}input[type=number]::-webkit-inner-spin-button,input[type=number]::-webkit-outer-spin-button{height:auto}input[type=search]{-webkit-appearance:textfield;box-sizing:content-box}input[type=search]::-webkit-search-cancel-button,input[type=search]::-webkit-search-decoration{-webkit-appearance:none}fieldset{border:1px solid silver;margin:0 2px;padding:.35em .625em .75em}legend{border:0;padding:0}textarea{overflow:auto}optgroup{font-weight:700}table{border-collapse:collapse;border-spacing:0}td,th{padding:0}*{box-sizing:border-box}html{font-size:16px}body{background:#f9f9f9;margin:0;padding:0;font-family:'Open Sans',sans-serif;font-weight:400}.container{padding:50px 15px;width:100%}header{width:100%;height:100px;display:flex;align-items:center;padding:0 50px;background:#fff}.product{position:relative;padding:27px;background:#fff;box-shadow:0 0 5px 4px #f4f4f4;outline:0}@media (max-width:576px){.product{padding:10px}}.product__icons-group{position:absolute;top:14px;right:14px;display:flex;flex-direction:column}@media (max-width:576px){.product__icons-group{right:10px}}.product__icons-group>*+*{margin-top:18px}@media (max-width:576px){.product__icons-group>*+*{margin-top:8px}}.product__image{display:block;width:185px;height:185px;margin:0 auto;outline:0}@media (max-width:768px){.product__image{max-width:100%}}@media (max-width:576px){.product__image{height:auto}}.product__image-src{width:100%;height:100%;-o-object-fit:contain;object-fit:contain}.product__inner{padding-top:15px;margin-bottom:15px}.product__body{display:flex;flex-direction:column;align-items:stretch;flex-grow:1;min-height:406px}.product__reviews{margin-bottom:5px}.product__name{margin:0 0 5px 0;font-weight:600;font-size:16px;line-height:1.5}.product__name-link{color:#000;font-weight:600;font-size:16px;line-height:1.5;text-decoration:none}.product__name-link:hover{color:#0b98f2}.product__characteristics{list-style:none;margin:0;padding:0;color:#151516;font-weight:400;font-size:13px;line-height:1.5}.product__characteristics-item{margin-bottom:2px}.product__characteristics-item-value{color:#0b98f2;cursor:pointer;margin-left:5px}@media (max-width:576px){.product__characteristics-item-value{margin-left:0}}.product__characteristics-item-value:hover{text-decoration:underline;color:#b10000}.product__footer{margin-top:auto;display:flex;align-items:flex-end}.product__footer-left{margin-right:auto;font-weight:400;font-size:13px;line-height:1.5}.product__footer-right{margin-left:45px}@media (max-width:768px){.product__footer-right{margin-left:15px}}.product__price{margin-bottom:5px}.product__price-old{text-decoration:line-through;color:#939393}.product__price-current{color:#b10000;font-weight:600;font-size:16px;line-height:1.5}.product__bonuses{color:#000;font-weight:400;font-size:13px;line-height:1.5}.product__bonuses-icon{font-size:15px;margin-right:4px}.product__add-button{display:flex;align-items:center;justify-content:center;width:45px;height:45px;outline:0;background:#0b98f2;color:#fff;font-size:20px;border-radius:50%;box-shadow:0 3px 4px 2px #c8e8fc;transition:all .3s ease;border:1px solid transparent}.product__add-button:hover{background:#0bb4f3;transform:translateY(1px);box-shadow:0 1px 2px 3px #c8e8fc;border:1px solid #0bb4f3}.add-favorite{cursor:pointer;color:#939393}.add-favorite:hover:before{content:'\f004'}.icon-confAlloy{color:#e9ba42;font-size:21px;text-align:center}.link-review{position:relative;display:flex;align-items:center;color:#4e575f;font-weight:400;font-size:12px;line-height:1.5;text-decoration:none}.link-review>i{font-size:16px;margin-right:5px;vertical-align:middle}.link-review:hover{color:#b10000}.slick-dots{list-style:none;margin:10px 0 0;display:flex;align-items:center;justify-content:center}.slick-dots li{background:rgba(155,155,155,.7);display:inline-block;width:10px;height:10px;margin:0 10px;cursor:pointer;border-radius:50%}.slick-dots li.slick-active{background:#0b98f2}.slick-dots li button{display:none}
/*# sourceMappingURL=data:application/json;charset=utf8;base64, */
